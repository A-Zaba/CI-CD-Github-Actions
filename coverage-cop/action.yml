name: 'coverage-cop'
description: 'CI Check Coverage results of unit tests (using lcov)'
inputs:
  path:
    description: 'Path to lcov output file containing coverage data.'
    required: true
  branch-coverage-min:
    description: 'The minumum required branch coverage (in %) for success'
    required: false
    default: 100
  line-coverage-min:
    description: 'The minumum required line coverage (in %) for success'
    required: false
    default: 100
runs:
  using: "composite"
  steps:
      - env:
          stepName: Install Dependencies
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd:  \033[0
        shell: bash
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          sudo apt-get install lcov fd-find
          echo "::endgroup::"
          echo -e "${{ env.bashPass }} ${{env.stepName }} ${{ env.bashEnd }}"

      - name: Print Coverage Data
        shell: bash
        run: lcov --list --rc lcov_branch_coverage=1 ${{ inputs.path }}

      - env:
          stepName: Check Line and Branch Coverage
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd:  \033[0
        name: ${{ env.stepName }}
        id: check-line-and-branch-coverage
        shell: bash
        run: |
          # ${{ env.stepName }}
          LINE_COVERAGE=$(lcov --list ${{ inputs.path }} | tail -n 1 | cut -d '|' -f 2 | sed -n "s/\([^%]*\)%.*/\1/p")
          BRANCH_COVERAGE=$(lcov --rc lcov_branch_coverage=1 --list ${{ inputs.path }} | tail -n 1 | cut -d '|' -f 4 | sed -n "s/\([^%]*\)%.*/\1/p")
          RESULT=0
          echo -e " ${{ env.bashInfo }} Required line coverage: ${{ inputs.line-coverage-min }} ${{ env.bashEnd}}"
          echo -e " ${{ env.bashInfo }} Line coverage:   $LINE_COVERAGE ${{ env.bashEnd}}"
          if [[ $(echo "$LINE_COVERAGE < ${{ inputs.line-coverage-min }}" | bc) -ne 0 ]]; then
            echo -e "${{ env.bashFail }} Line Coverage is too low. ${{ env.bashEnd }}"
            RESULT=1
          fi
          echo "Required branch coverage: ${{ inputs.branch-coverage-min }}"
          echo "Branch coverage: $BRANCH_COVERAGE"
          if [[ $(echo "$BRANCH_COVERAGE < ${{ inputs.branch-coverage-min }}" | bc) -ne 0 ]]; then
            echo -e "${{ env.bashFail }} Branch Coverage is too low. ${{ env.bashEnd }}"
            RESULT=1
          fi
          if [ $RESULT -eq 0 ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            # Generate the HTML Report of the lcov run
            genhtml --ignore-errors source build/coverage.info --legend --title "$(git rev-parse HEAD)" --output-directory=lcovHTMLReport;
            zip -r lcovReport.zip htmlOutput
            mv htmlOutput $GITHUB_ACTION_PATH
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          fi
          exit $RESULT

      - env:
          stepName: Upload Line and Branch Report
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd:  \033[0
        name: ${{ env.stepName }}
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: lcovReport
          path: $GITHUB_ACTION_PATH/lcovReport.zip
          retention-days: 5
